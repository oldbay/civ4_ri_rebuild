from CvPythonExtensions import *
import CvUtil
import ScreenInput
import CvScreenEnums
import BugUtil
gc = CyGlobalContext()
gDistance = []

class Revolutions:
	def __init__(self):
		self.iHappy		= 10	## Increased by X Per Excess Unhappy
		self.iHealth		= 4	## Increased by X Per Excess Unhealthy
		self.iNonStateReligion	= 5	## Increased by X Per Non State Religion or Absense of State Religion
		self.iNationality		= 0.2	## Increased by X Per Non Nationality
		self.iOccupation		= 1	## Increased by X Per Occupation Turn
		self.iUnit			= 3	## Decreased by X Per Defender
		self.iDistance		= 1	## Decreased by X Per Tile Distance during Uprising
		self.iPopulation	= 0.2 ## Increased by X Per Population point
		self.iEspionage	= 2 ## Decreased by X Per Espionage generated by the city		
		self.iBaseChance	= 0 ## Base separatism level
		self.Civics = [		["CIVIC_AUTOCRACY", -5],
					["CIVIC_THEOCRACY", -15],
					["CIVIC_DICTATORSHIP", -10],
					["CIVIC_RULEOFFEAR", -5],
					["CIVIC_COLLECTIVISM", -5],
					["CIVIC_SOCIAL_JUSTICE", -5],
					["CIVIC_WELFARE_STATE", -5]]
		self.Methods = [["BRIBE"], ["REPLACE"],	["HARSH"], ["SERMON"], ["TAX"], ["MARTIAL"], ["ARRESTS"], ["PROPAGANDA"], ["AUTONOMY"]]
		self.iNewDefenders		= 2	## Number of Extra Defenders after Uprising
		self.iCultureXfer		= 80	## X% Culture Transferred after Revolution
		self.iSafeZone		= 0	## No Revolution Below This Level
		self.iDangerZone		= 10	## Can Start Uprising
		self.iMaxZone		= 100	## 100% Revolution
		self.iLeaderEra = gc.getPlayer(CyGame().getRankPlayer(0)).getCurrentEra()

	def checkRevolutions(self, iPlayer):
		pPlayer = gc.getPlayer(iPlayer)
		if pPlayer.isBarbarian(): return
		pPlayer.calculateRevModifier() 
		if pPlayer.getNumCities() < 2: return
		iGlobalModifer = pPlayer.getRevModifier()
		(loopCity, iter) = pPlayer.firstCity(False)
		while(loopCity):
			iRevolution = self.countRevolution(loopCity, iPlayer, iGlobalModifer)
			loopCity.changeCitySeparatism(iRevolution)
			if iRevolution >= self.iDangerZone:
				if CyGame().getSorenRandNum(self.iMaxZone, "Revolution") < iRevolution:
					if loopCity.getNumBuilding(gc.getInfoTypeForString("BUILDING_RIOTS")) == 0 and loopCity.getNumBuilding(gc.getInfoTypeForString("BUILDING_UNREST")) == 0:
						loopCity.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_UNREST"), 1)
						
						for i in self.Methods:
							sMethod = str(i[0])
							sMethodEffect = str("BUILDING_EFFECT_") + sMethod
							if loopCity.getNumBuilding(gc.getInfoTypeForString(sMethodEffect)) != 0:
								loopCity.setNumRealBuilding(gc.getInfoTypeForString(sMethodEffect), 0)
								sMethodRiotText = str("TXT_KEY_") + sMethod + str("_RIOT_MESSAGE")
								CyInterface().addMessage(iPlayer, true, gc.getEVENT_MESSAGE_TIME(), CyTranslator().getText(sMethodRiotText, (loopCity.getName(),)), "AS2D_REVOLTSTART", InterfaceMessageTypes.MESSAGE_TYPE_INFO, gc.getBuildingInfo(gc.getInfoTypeForString(sMethodEffect)).getButton(), gc.getInfoTypeForString("COLOR_RED"), loopCity.getX(), loopCity.getY(), true, true)

						CyInterface().addMessage(iPlayer, true, gc.getEVENT_MESSAGE_TIME(), CyTranslator().getText("TXT_KEY_UNREST_MESSAGE", (loopCity.getName(),)), "AS2D_REVOLTSTART", InterfaceMessageTypes.MESSAGE_TYPE_INFO, gc.getBuildingInfo(gc.getInfoTypeForString("BUILDING_UNREST")).getButton(), gc.getInfoTypeForString("COLOR_RED"), loopCity.getX(), loopCity.getY(), true, true)
					elif (loopCity.getNumBuilding(gc.getInfoTypeForString("BUILDING_UNREST")) == 1) and (gc.getGame().isOption(GameOptionTypes.GAMEOPTION_NO_EVENTS)):
						tRevolt = CvUtil.findInfoTypeNum(gc.getEventTriggerInfo, gc.getNumEventTriggerInfos(),'EVENTTRIGGER_REVOLT')
						pPlayer.trigger(tRevolt)
					elif loopCity.getNumBuilding(gc.getInfoTypeForString("BUILDING_RIOTS")) == 1:
						loopCity.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_RIOTS"), 0)
						self.startUprising(loopCity, iPlayer)
						break
			if iRevolution <= 0:
				if loopCity.getNumBuilding(gc.getInfoTypeForString("BUILDING_RIOTS")) > 0:
					loopCity.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_RIOTS"), 0)
					CyInterface().addMessage(iPlayer, true, gc.getEVENT_MESSAGE_TIME(), CyTranslator().getText("TXT_KEY_UNREST_END_MESSAGE", (loopCity.getName(),)), "AS2D_REVOLTEND", InterfaceMessageTypes.MESSAGE_TYPE_INFO, gc.getBuildingInfo(gc.getInfoTypeForString("BUILDING_SUBJUGATION")).getButton(), gc.getInfoTypeForString("COLOR_GREEN"), loopCity.getX(), loopCity.getY(), true, true)
			(loopCity, iter) = pPlayer.nextCity(iter, False)

	def countRevolution(self, pCity, iPlayer, iGlobalModifer):
		iRevolution = self.iBaseChance + self.getRevNegatives(pCity, iPlayer, iGlobalModifer) + self.getRevPositives(pCity, iPlayer)
		iTempRevolution = self.getTempRev(pCity, iPlayer, iGlobalModifer)
		pCity.changeCitySeparatismTemp(iTempRevolution)
		iRevolution = int(iRevolution)
		return iRevolution

	def getRevHappy(self, pCity):
		return max(0, (pCity.unhappyLevel(0) - pCity.happyLevel())) * self.iHappy

	def getRevHealth(self, pCity):
		return max(0, (pCity.badHealth(False) - pCity.goodHealth())) * self.iHealth

	def getRevReligion(self, pCity, iPlayer):
		iRevolution = 0
		iReligion = gc.getPlayer(iPlayer).getStateReligion()
		if iReligion > -1:
			for i in xrange(gc.getNumReligionInfos()):
				if i == iReligion:
					if not pCity.isHasReligion(i):
						iRevolution += self.iNonStateReligion
				elif pCity.isHasReligion(i):
					iRevolution += self.iNonStateReligion
		if CyGame().getCurrentEra() < 2 and self.iLeaderEra < 3:
			iRevolution /= 2
		if CyGame().getCurrentEra() > 3 or self.iLeaderEra > 4:
			iRevolution /= 2
		return iRevolution

	def getRevNationality(self, pCity, iPlayer):
		if CyGame().getCurrentEra() == 0 and self.iLeaderEra < 2:
			return (100 - pCity.plot().calculateCulturePercent(iPlayer)) * self.iNationality / 2
		elif CyGame().getCurrentEra() == 4:
			return (100 - pCity.plot().calculateCulturePercent(iPlayer)) * self.iNationality * 3 / 2
		elif CyGame().getCurrentEra() < 4 and self.iLeaderEra == 5:
			return (100 - pCity.plot().calculateCulturePercent(iPlayer)) * self.iNationality * 3 / 2
		elif CyGame().getCurrentEra() > 5:
			return (100 - pCity.plot().calculateCulturePercent(iPlayer)) * self.iNationality / 2
		else:
			return (100 - pCity.plot().calculateCulturePercent(iPlayer)) * self.iNationality

	def getRevOccupation(self, pCity):
		return self.iOccupation * pCity.getOccupationTimer()

	def getRevDefenders(self, pCity, iPlayer):
		if CyGame().getCurrentEra() < 3 and self.iLeaderEra < 4:
			iRevDefenders = - pCity.plot().getNumDefenders(iPlayer) * self.iUnit * 2
		else:
			iRevDefenders = - pCity.plot().getNumDefenders(iPlayer) * self.iUnit
		pCity.changeCitySeparatismUnit(iRevDefenders)
		return iRevDefenders

	def getRevCivics(self, pCity, iPlayer):
		pPlayer = gc.getPlayer(iPlayer)
		iRevolution = 0
		for i in self.Civics:
			iCivic = gc.getInfoTypeForString(i[0])
			if iCivic == -1: continue
			if pPlayer.isCivic(iCivic):
				iRevolution += i[1]
		return iRevolution

	def getRevBuildings(self, pCity):
		iRevolution = 0
		for building in range(gc.getNumBuildingInfos()):
			if pCity.isHasBuilding(building):
				iRevolution += gc.getBuildingInfo(building).getSeparatism()
		return iRevolution
		
	def getRevBuildingsPositive(self, pCity):
		iRevolution = 0
		for building in range(gc.getNumBuildingInfos()):
			if pCity.isHasBuilding(building) and gc.getBuildingInfo(building).getSeparatism() < 0:
				iRevolution += gc.getBuildingInfo(building).getSeparatism()
		return iRevolution

	def getRevBuildingsNegative(self, pCity):
		iRevolution = 0
		for building in range(gc.getNumBuildingInfos()):
			if pCity.isHasBuilding(building) and gc.getBuildingInfo(building).getSeparatism() > 0:
				iRevolution += gc.getBuildingInfo(building).getSeparatism()
		return iRevolution		
		
	def getRevBuildingScore(self, iBuilding):
		iRevolution = 0
		iRevolution += gc.getBuildingInfo(iBuilding).getSeparatism()
		return iRevolution
		
	def getRevPopulation(self, pCity):
		return int(pCity.getPopulation() * self.iPopulation)
		
	def getRevEspionage(self, pCity):
		return pCity.getCommerceRateTimes100(CommerceTypes.COMMERCE_ESPIONAGE) / -100 * self.iEspionage
		
	def getRevNegatives(self, pCity, iPlayer, iGlobalModifer):
		iRevolutionNeg = self.getRevHappy(pCity)
		iRevolutionNeg += self.getRevHealth(pCity)
		iRevolutionNeg += self.getRevReligion(pCity, iPlayer)
		iRevolutionNeg += self.getRevNationality(pCity, iPlayer)
		iRevolutionNeg += self.getRevOccupation(pCity)
		iRevolutionNeg += self.getRevBuildingsNegative(pCity)
		iRevolutionNeg += self.getRevPopulation(pCity)
		iRevolutionNeg *= (100 + iGlobalModifer) 
		iRevolutionNeg /= 100
		iDebug = iGlobalModifer
		iDebug2 = iRevolutionNeg
		return int(iRevolutionNeg)
		
	def getTempRev(self, pCity, iPlayer, iGlobalModifer):
		iTempRevolution = 0
		for i in self.Methods:
			sMethod = str(i[0])
			sMethodEffect = str("BUILDING_EFFECT_") + sMethod
			if pCity.getNumBuilding(gc.getInfoTypeForString(sMethodEffect)) != 0:
				iTempRevolution += gc.getBuildingInfo(gc.getInfoTypeForString(sMethodEffect)).getSeparatism()
		if pCity.getNumBuilding(gc.getInfoTypeForString("BUILDING_SUBJUGATION")) != 0:
			iTempRevolution += gc.getBuildingInfo(gc.getInfoTypeForString("BUILDING_SUBJUGATION")).getSeparatism()
		return int(iTempRevolution)
		
	def getRevPositives(self, pCity, iPlayer):
		iRevolutionPos = self.getRevDefenders(pCity, iPlayer)
		iRevolutionPos += self.getRevCivics(pCity, iPlayer)
		iRevolutionPos += self.getRevBuildingsPositive(pCity)
		iRevolutionPos += self.getRevEspionage(pCity)
		return int(iRevolutionPos)
		
	def startUprising(self, pCity, iPlayer):
		pPlayer = gc.getPlayer(iPlayer)
		pTeam = gc.getTeam(pPlayer.getTeam())
		iNewPlayer = gc.getBARBARIAN_PLAYER()
		iCulture = 0
		iMaxCulture = 0
		iNewCiv = -1
		iNewLeader = -1
		iCanNew = False
		iCanOld = False
		lCiv = []
		pCityPlot = pCity.plot()
		
		if gc.getMAX_PLAYERS() > CyGame().countCivPlayersEverAlive() + 1:	
			for iPlayerX in xrange(gc.getMAX_PLAYERS()): 				## 			Check if we can return a city to its rightful owner
				pPlayerX = gc.getPlayer(iPlayerX)
				if pPlayerX.getTeam() == pCity.getTeam(): continue
				if pPlayerX.isEverAlive():
					iCulture = pCityPlot.getCulture(iPlayerX)
					if iCulture > iMaxCulture:
						if iCulture > pCityPlot.getCulture(iPlayer):					
							iMaxCulture = iCulture
							iCanNew = False
							iCanOld = True
							iNewPlayer = iPlayerX

		if iCanOld == False and gc.getMAX_PLAYERS() > CyGame().countCivPlayersEverAlive() + 1:						## 			No suitable rightful owner and enough free player slots

			iNewCiv = gc.getCivilizationInfo(pPlayer.getCivilizationType()).getFirstDerivative()
			if iNewCiv == -1:
				iCanNew = False
			else:
				iCanNew = True

			if CyGame().isCivEverActive(iNewCiv) == True:															## 			Check if the best candidate civ is already in use
				iNewCiv = -1
				iCanNew = False
				
			if iCanNew == False: 																					## 			Check the rest of the possible candidates 
				for i in xrange(gc.getCivilizationInfo(pPlayer.getCivilizationType()).getNumDerivativeCivs()):
					iCivAlt = gc.getCivilizationInfo(pPlayer.getCivilizationType()).getNDerivative(i)	
					iNewCiv = iCivAlt
					if CyGame().isCivEverActive(iNewCiv) == True: continue 
					else:
						iCanNew = True 
						break
				
		if iCanOld == True:
			pNewPlayer = gc.getPlayer(iNewPlayer)
			self.doRevolutions(pCity, iPlayer, iNewPlayer)
			pCity1 = pCityPlot.getPlotCity()
			iCiv = pNewPlayer.getCivilizationType()
			CivInfo = gc.getCivilizationInfo(iCiv)
			if gc.getCivilizationInfo(pNewPlayer.getCivilizationType()) != -1:
				sButton = gc.getCivilizationInfo(pNewPlayer.getCivilizationType()).getButton()
			else:
				sButton = gc.getBuildingInfo(gc.getInfoTypeForString("BUILDING_SUBJUGATION")).getButton()
			for iPlayerX in xrange(gc.getMAX_PLAYERS()):
				pPlayerX = gc.getPlayer(iPlayerX)
				if pPlayerX.isHuman() and pPlayerX.canContact(iPlayer):
					CyInterface().addMessage(iPlayerX,True,gc.getEVENT_MESSAGE_TIME(),CyTranslator().getText("TXT_KEY_START_REVOLUTION_OLD",(pCity1.getName(),CivInfo.getDescription(),)),"",2, sButton, gc.getInfoTypeForString("COLOR_NEGATIVE_TEXT"), pCity.getX(), pCity.getY(), True, True)
				
		elif iCanOld == False and iCanNew == True and gc.getMAX_PLAYERS() > CyGame().countCivPlayersEverAlive() + 1: 									## 			If we can spawn a new civ, time to pick a leader
			iNewPlayer = self.getNewID()
			lLeader = []
			for iLeader in xrange(gc.getNumLeaderHeadInfos()):
				if CyGame().isLeaderEverActive(iLeader): continue
				if iLeader == gc.getDefineINT("BARBARIAN_LEADER"): continue
				if not CyGame().isOption(GameOptionTypes.GAMEOPTION_LEAD_ANY_CIV):
					if not gc.getCivilizationInfo(iNewCiv).isLeaders(iLeader): continue
				lLeader.append(iLeader)
			if len(lLeader) > 0:
				iNewLeader = lLeader[CyGame().getSorenRandNum(len(lLeader), "Chose Leader")]
			if iNewLeader == -1: 
				iCanNew = False		
			if iCanNew == True and gc.getMAX_PLAYERS() > CyGame().countCivPlayersEverAlive(): 
				pNewPlayer = gc.getPlayer(iNewPlayer)
				CyGame().addPlayer(iNewPlayer, iNewLeader, iNewCiv)
				self.doRevolutions(pCity, iPlayer, iNewPlayer)
				pCity1 = pCityPlot.getPlotCity()
				pCity1.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_ENTHUSIASM"), 1)
				iCiv = pNewPlayer.getCivilizationType()
				CivInfo = gc.getCivilizationInfo(iCiv)
				
				sDesc = CivInfo.getDescription()
				sShort = CivInfo.getShortDescription(0)
				sAdj = CivInfo.getAdjective(0)
				sFlag = pNewPlayer.getFlagDecal()
				
				sDesc = pCity1.getName() + " Rebels"
				sAdj = sAdj + " Rebel"
				sShort = pCity1.getName()
				sFlag = "Art/Interface/TeamColor/rebel_" + str(iCiv) + ".dds"
				
				pNewPlayer.setCivName(sDesc, sShort, sAdj)								## 			Set the name and flag of the new civ to rebels; if it meets the requirements for full civ, it will turn there at the next civic change, irrespective of whether dynamic names/flags are on
				pNewPlayer.setFlagDecal(sFlag, true)
				pNewPlayer.setWhiteFlag(true)
				
				if gc.getCivilizationInfo(pNewPlayer.getCivilizationType()) != -1:
					sButton = gc.getCivilizationInfo(pNewPlayer.getCivilizationType()).getButton()
				else:
					sButton = gc.getBuildingInfo(gc.getInfoTypeForString("BUILDING_SUBJUGATION")).getButton()
				for iPlayerX in xrange(gc.getMAX_PLAYERS()):
					pPlayerX = gc.getPlayer(iPlayerX)
					if pPlayerX.isHuman() and pPlayerX.canContact(iPlayer):
						CyInterface().addMessage(iPlayerX,True,gc.getEVENT_MESSAGE_TIME(),CyTranslator().getText("TXT_KEY_START_REVOLUTION",(pCity1.getName(),CivInfo.getDescription(),)),"",2, sButton, gc.getInfoTypeForString("COLOR_NEGATIVE_TEXT"), pCity.getX(), pCity.getY(), True, True)
		else:	
			pNewPlayer = gc.getPlayer(iNewPlayer)
			if CyGame().isOption(GameOptionTypes.GAMEOPTION_NO_BARBARIANS) and pNewPlayer.isBarbarian(): return
			pNewTeam = gc.getTeam(pNewPlayer.getTeam())
			if not pNewTeam.isAlive():
				for iTech in xrange(gc.getNumTechInfos()):
					if pNewTeam.isHasTech(iTech): continue
					if pTeam.isHasTech(iTech):
						pNewTeam.setHasTech(iTech, True, iNewPlayer, False, False)
			iCiv = pNewPlayer.getCivilizationType()
			CivInfo = gc.getCivilizationInfo(iCiv)			
			if gc.getCivilizationInfo(pNewPlayer.getCivilizationType()) != -1:
				sButton = gc.getCivilizationInfo(pNewPlayer.getCivilizationType()).getButton()
			else:
				sButton = gc.getBuildingInfo(gc.getInfoTypeForString("BUILDING_SUBJUGATION")).getButton()
			pCityPlot = pCity.plot()
			pCity1 = pCityPlot.getPlotCity()
			for iPlayerX in xrange(gc.getMAX_PLAYERS()):
				pPlayerX = gc.getPlayer(iPlayerX)
				if pPlayerX.isHuman() and pPlayerX.canContact(iPlayer):
					CyInterface().addMessage(iPlayerX,True,gc.getEVENT_MESSAGE_TIME(),CyTranslator().getText("TXT_KEY_START_REVOLUTION",(pCity1.getName(),CivInfo.getDescription(),)),"",2, sButton, gc.getInfoTypeForString("COLOR_NEGATIVE_TEXT"), pCity.getX(), pCity.getY(), True, True)
			if iCanNew == False: 
				self.doRevolutions(pCity, iPlayer, iNewPlayer)

		(loopCity, iter) = pPlayer.firstCity(False)
		while(loopCity):
			iGlobalModifer = pPlayer.getRevModifier()			
			iRevolution = self.countRevolution(loopCity, iPlayer, iGlobalModifer)
			if iRevolution >= self.iSafeZone:
				iTotalCulture = 0
				for iPlayerX in xrange(gc.getMAX_PLAYERS()):
					iTotalCulture += loopCity.getCulture(iPlayerX)
				iCultureModifier = self.iNationality * loopCity.getCulture(iNewPlayer) * 100 / (iTotalCulture + 1)
				iRevolution += iCultureModifier
				iDistanceModifier = min(abs(loopCity.getX() - pCity.getX()), abs(loopCity.getY() - pCity.getY()))
				iRevolution -= self.iDistance * iDistanceModifier
				iRevolution *= 5
				if CyGame().getSorenRandNum(self.iMaxZone, "Revolution") < iRevolution:
					for iPlayerX in xrange(gc.getMAX_PLAYERS()):
						if pPlayerX.isHuman():
							CyInterface().addMessage(iPlayerX,True,10,CyTranslator().getText("TXT_KEY_JOIN_REVOLUTION",(loopCity.getName(),)),"",0, "", -1, -1, -1, True, True)
					loopCityPlot = loopCity.plot()
					self.doRevolutions(loopCity, iPlayer, iNewPlayer)
					if iCanOld == False and iCanNew == True:
						loopCity1 = loopCityPlot.getPlotCity()
						loopCity1.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_ENTHUSIASM"), 1)
			(loopCity, iter) = pPlayer.nextCity(iter, False)

	def doRevolutions(self, pCity, iOldPlayer, iNewPlayer):
		pPlayer = gc.getPlayer(iNewPlayer)
		pOldPlayer = gc.getPlayer(iOldPlayer)
		pTeam = gc.getTeam(pPlayer.getTeam())
		pNewTeam = gc.getTeam(pPlayer.getTeam())
		bCameBack = false

		if pPlayer.getNumCities() < 1:
			if not pPlayer.isBarbarian(): 
				bCameBack = true
				pPlayer.killAllDeals()
				for i in xrange(gc.getMAX_CIV_TEAMS()):
					pXTeam = gc.getTeam(i)
					if pNewTeam.isAtWar(i) and not pXTeam.isBarbarian():
						pNewTeam.makePeace(i)
				pPlayer.AI_changeMemoryCount(iOldPlayer, gc.getInfoTypeForString("MEMORY_EVENT_BAD_TO_US"), 3)
				pOldPlayer.AI_changeMemoryCount(iNewPlayer, gc.getInfoTypeForString("MEMORY_EVENT_BAD_TO_US"), 3)
			
		pCityPlot = pCity.plot()
		pCity1 = pCityPlot.getPlotCity()
		iCityPop = pCity1.getPopulation()
		szCityName = pCity.getName()
		iDefenders = CyGame().getSorenRandNum(iCityPop, "Defenders") + self.iNewDefenders
		lUnits = []
		for i in xrange(pCityPlot.getNumUnits()):
			pUnit = pCityPlot.getUnit(i)
			iOwner = pUnit.getOwner()
			if iOwner == -1: continue
			lUnits.append([pUnit.getID(), iOwner])

		iCulture = pCity.getCulture(iOldPlayer)
		iCultureTransfer = self.iCultureXfer * iCulture / 100
		pCity.changeCulture(iNewPlayer, iCultureTransfer, True)
		pCity.changeCulture(iOldPlayer, -iCultureTransfer, True)

		iPlotCulture = pCityPlot.getCulture(iOldPlayer)
		iPlotCultureTransfer = self.iCultureXfer * iPlotCulture / 100
		pCityPlot.changeCulture(iNewPlayer, iPlotCultureTransfer, True)
		pCityPlot.changeCulture(iOldPlayer, -iPlotCultureTransfer, True)
		for x in range(-1,2):
			for y in range(-1,2):
				if (x != 0) or (y != 0):
					if CyMap().isPlot(pCity.getX() + x, pCity.getY() + y):
						pIterPlot = CyMap().plot(pCity.getX() + x, pCity.getY() + y)
						iIterPlotCulture = pIterPlot.getCulture(iOldPlayer)
						iPlotCultureTransfer = self.iCultureXfer * iIterPlotCulture / 100
						pIterPlot.changeCulture(iNewPlayer, iPlotCultureTransfer, True)
						pIterPlot.changeCulture(iOldPlayer, -iPlotCultureTransfer, True)
		for x in range(-1,2):
			if CyMap().isPlot(pCity.getX() + x, pCity.getY() + 2):
				pIterPlot = CyMap().plot(pCity.getX() + x, pCity.getY() + y)
				iIterPlotCulture = pIterPlot.getCulture(iOldPlayer)
				iPlotCultureTransfer = self.iCultureXfer * iIterPlotCulture / 200
				pIterPlot.changeCulture(iNewPlayer, iPlotCultureTransfer, True)
				pIterPlot.changeCulture(iOldPlayer, -iPlotCultureTransfer, True)			
			if CyMap().isPlot(pCity.getX() + x, pCity.getY() - 2):
				pIterPlot = CyMap().plot(pCity.getX() + x, pCity.getY() + y)
				iIterPlotCulture = pIterPlot.getCulture(iOldPlayer)
				iPlotCultureTransfer = self.iCultureXfer * iIterPlotCulture / 200
				pIterPlot.changeCulture(iNewPlayer, iPlotCultureTransfer, True)
				pIterPlot.changeCulture(iOldPlayer, -iPlotCultureTransfer, True)
		for y in range(-1,2):
			if CyMap().isPlot(pCity.getX() + 2, pCity.getY() + y):
				pIterPlot = CyMap().plot(pCity.getX() + x, pCity.getY() + y)
				iIterPlotCulture = pIterPlot.getCulture(iOldPlayer)
				iPlotCultureTransfer = self.iCultureXfer * iIterPlotCulture / 200
				pIterPlot.changeCulture(iNewPlayer, iPlotCultureTransfer, True)
				pIterPlot.changeCulture(iOldPlayer, -iPlotCultureTransfer, True)			
			if CyMap().isPlot(pCity.getX() - 2, pCity.getY() + y):
				pIterPlot = CyMap().plot(pCity.getX() + x, pCity.getY() + y)
				iIterPlotCulture = pIterPlot.getCulture(iOldPlayer)
				iPlotCultureTransfer = self.iCultureXfer * iIterPlotCulture / 200
				pIterPlot.changeCulture(iNewPlayer, iPlotCultureTransfer, True)
				pIterPlot.changeCulture(iOldPlayer, -iPlotCultureTransfer, True)
				
		pPlayer.acquireCity(pCity, False, False)
		pCity1 = pCityPlot.getPlotCity()
		if pPlayer.getNumCities() == 1:
			pCity1.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_PALACE"), 1)
		pCity1.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_SUBJUGATION"), 1)
		pCity1.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_RIOTS"), 0)
		pCity1.setNumRealBuilding(gc.getInfoTypeForString("BUILDING_UNREST"), 0)
		pOldCaptial = pOldPlayer.getCapitalCity()
		iTeam = pPlayer.getTeam()
		pTeam = gc.getTeam(iTeam)
		# Create a list of surrounding plots
		iMaxRadius = 3
		iMinRadius = 2
		surroundingPlots = []
		
		if bCameBack == true:
			if not pPlayer.isBarbarian(): 
				for iTech in xrange(gc.getNumTechInfos()):
					if pTeam.isHasTech(iTech): continue
					if pPlayer.canEverResearch(iTech):
						iCost = pTeam.getResearchCost(iTech)
						if gc.getTeam(iOldPlayer).isHasTech(iTech):
							pTeam.changeResearchProgress(iTech, iCost - pTeam.getResearchProgress(iTech), iNewPlayer)
							continue

		global gDistance
		if (len(gDistance) == 0):
			gDistance = [[0] * 11 for i in range(11)]
			for iX in range(11):
				for iY in range(11):
					if iX in [0, 1] and iY in [0, 1]:
						gDistance[iX][iY] = 1
					else:
						gDistance[iX][iY] = int((iX**2 + iY**2)**0.5 + (0.5**2 + 0.5**2)**0.5)

		pMap = gc.getMap()

		iCityPlotX = pCity1.getX()
		iCityPlotY = pCity1.getY()

		iRange = (2 * iMaxRadius) + 1

		for iRangeX in range(iRange):
			for iRangeY in range(iRange):
				iPlotX = iRangeX - iMaxRadius + iCityPlotX
				iPlotY = iRangeY - iMaxRadius + iCityPlotY

				iDistanceX = abs(iRangeX - iMaxRadius)
				iDistanceY = abs(iRangeY - iMaxRadius)
				iDistance = gDistance[iDistanceX][iDistanceY]

				# Find valid plots of appropriate distance
				if (pMap.isPlot(iPlotX, iPlotY) and (iMaxRadius >= iDistance) and (iDistance >= iMinRadius)):
					pPlot = pMap.plot(iPlotX, iPlotY)
					# Make sure it's not a city
					if (not pPlot.isCity()):
						# Only land and hill plots are valid for spawning rebels
						if (pPlot.isFlatlands() or pPlot.isHills()):
							# Don't spawn on tiles with non-barbarian units already on them
							iNumUnits = pPlot.getNumUnits()
							bIsPlotFree = True
							if (iNumUnits > 0):
								for iUnit in range(iNumUnits):
									pUnit = pPlot.getUnit(iUnit)
									if (pUnit.getOwner() != iOldPlayer):
										bIsPlotFree = False
										break
							# If the plot is free then add it to the list
							if bIsPlotFree:
								surroundingPlots.append([iPlotX, iPlotY])

		# If there are no unoccupied tiles around the city then we move the units to owner's capital
		if (len(surroundingPlots) == 0):
			pOldPlot = pOldCaptial.plot()
			iSpawnPlotX = pOldPlot.getX()
			iSpawnPlotY = pOldPlot.getY()
		else:
			iRandPos = gc.getGame().getSorenRandNum(len(surroundingPlots), "Evacuation plot")
			(iSpawnPlotX, iSpawnPlotY) = surroundingPlots[iRandPos]
		
		for i in lUnits:
			pUnit = gc.getPlayer(i[1]).getUnit(i[0])
			if pUnit.isNone(): continue
			pUnit.setXY(iSpawnPlotX, iSpawnPlotY,False,True,False)
		if pPlayer.isBarbarian():
			newUnit = pOldPlayer.getCapitalCity().getConscriptUnit()
			if newUnit == -1:
				newUnit = pCityPlot.getPlotCity().getConscriptUnit()
			dnewUnit = pPlayer.getUnit(newUnit)
		else:		
			newUnit = pCityPlot.getPlotCity().getConscriptUnit()
			dnewUnit = pPlayer.getUnit(newUnit)
		if (pCityPlot.getPlotCity().getConscriptUnit() == UnitTypes.NO_UNIT):
			print "SEPARATIST UNIT ERROR, NO CONSCRIPT UNIT"
		elif newUnit == -1:
			print "SEPARATIST UNIT ERROR, WRONG UNIT CLASS"
		else:
			if pPlayer and newUnit and iCityPlotX and iCityPlotY:
				pCity1 = pCityPlot.getPlotCity()
				i = 0
				if iDefenders > 0:
					while i < iDefenders:
						pDefender = pPlayer.initUnit(newUnit, pCity1.getX(), pCity1.getY(), UnitAITypes.NO_UNITAI, DirectionTypes.NO_DIRECTION)
						i += 1
					pCity1.changeConscriptAngerTimer(-pCity1.getConscriptAngerTimer())
			else: 
				print "Unexpected C++ thingie would be here"
				
		for iTeamX in xrange(gc.getMAX_CIV_TEAMS()):
			if pTeam.getWarWeariness(iTeamX) > 0:
				pTeam.setWarWeariness(iTeamX, 0) ## 			The war weariness of the civ that just had a major revolt set to 0 to prevent death spirals		

		if not pOldPlayer.isHuman():
			if pOldPlayer.getPower() > pPlayer.getPower() * 1.2:
				gc.getTeam(pOldPlayer.getTeam()).declareWar(pPlayer.getTeam(), false, WarPlanTypes.WARPLAN_LIMITED) ## 			If AI is reasonably sure it can conquer the rebel cities back, it will declare war

	def interfaceScreen(self):
		screen = CyGInterfaceScreen("RevolutionTracker", CvScreenEnums.REVOLUTION_SCREEN)
		self.nMargin = 10
		self.textMargin = 10
		self.nScreenWidth = screen.getXResolution() - 50
		self.nTableWidth = self.nScreenWidth - 40
		self.nScreenHeight = screen.getYResolution() - 300
		self.nTableHeight = self.nScreenHeight - 125
		self.modHeight = 150
		screen.setRenderInterfaceOnly(True)
		screen.setDimensions(screen.getXResolution()/2 - self.nScreenWidth/2, 100, self.nScreenWidth, self.nScreenHeight)
		screen.showScreen(PopupStates.POPUPSTATE_IMMEDIATE, False)
	
		#screen.addPanel( "RevolutionTrackerBG", u"", u"", True, False, 0, 0, self.nScreenWidth, self.nScreenHeight, PanelStyles.PANEL_STYLE_MAIN )
		screen.addDDSGFC( "RevolutionTrackerBGPic", CyArtFileMgr().getInterfaceArtInfo("MAINMENU_SLIDESHOW_LOAD").getPath(), 0, 0, self.nScreenWidth, self.nScreenHeight, WidgetTypes.WIDGET_GENERAL, -1, -1)
		
		# Top Panel
		screen.addPanel("RevolutionTrackerTop", u"", u"", True, False, 0, 0, self.nScreenWidth, 55, PanelStyles.PANEL_STYLE_TOPBAR)
		
		# Bottom Panel
		screen.addPanel("RevolutionTrackerBottom", u"", u"", True, False, 0, self.nScreenHeight - 55, self.nScreenWidth, 55, PanelStyles.PANEL_STYLE_BOTTOMBAR)
		
		screen.setText("RevolutionExit", "Background", u"<font=4b>" + CyTranslator().getText("TXT_KEY_PEDIA_SCREEN_EXIT", ()).upper() + "</font>", CvUtil.FONT_RIGHT_JUSTIFY, self.nScreenWidth - 25, self.nScreenHeight - 35, -0.1, FontTypes.TITLE_FONT, WidgetTypes.WIDGET_CLOSE_SCREEN, -1, -1 )
		screen.setText("RevolutionHeader", "Background", u"<font=4b>" + CyTranslator().getText("TXT_KEY_REVOLUTION_HEADER", ()) + "</font>", CvUtil.FONT_CENTER_JUSTIFY, self.nScreenWidth/2, 10, -0.1, FontTypes.TITLE_FONT, WidgetTypes.WIDGET_GENERAL, -1, -1)

		iColumns = 14
		screen.addTableControlGFC( "RevolutionTable", iColumns + 1, 20, 60, self.nTableWidth, self.nTableHeight - self.modHeight - self.nMargin, True, False, 24, 24, TableStyles.TABLE_STYLE_STANDARD )
		iWidth = self.nTableWidth/(iColumns + 2)
		screen.setTableColumnHeader( "RevolutionTable", 0, "<font=2>" + CyTranslator().getText("TXT_KEY_DOMESTIC_ADVISOR_NAME", ()) + "</font>", self.nTableWidth - iColumns * iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 1, "<font=2>" + CyTranslator().getText("[ICON_UNHAPPY]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 2, "<font=2>" + CyTranslator().getText("[ICON_UNHEALTHY]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 3, "<font=2>" + CyTranslator().getText("[ICON_RELIGION]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 4, "<font=2>" + CyTranslator().getText("[ICON_CULTURE]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 5, "<font=2>" + CyTranslator().getText("[ICON_OCCUPATION]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 6, "<font=2>" + CyTranslator().getText("[ICON_DEFENSE]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 7, "<font=2>" + CyTranslator().getText("[ICON_ANGRYPOP]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 8, "<font=2>" + CyTranslator().getText("[ICON_ESPIONAGE]", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 9, "<font=2>" + CyTranslator().getText("TXT_KEY_PEDIA_CATEGORY_CIVIC", ()) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 10, "<font=2>" + CyTranslator().getText("TXT_KEY_PEDIA_CATEGORY_BUILDING", ()) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_POS_CHAR)) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 11, "<font=2>" + CyTranslator().getText("TXT_KEY_PEDIA_CATEGORY_BUILDING", ()) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_NEG_CHAR)) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 12, "<font=2>" + CyTranslator().getText("TXT_KEY_REVOLUTION_TOTAL", ()) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_POS_CHAR)) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 13, "<font=2>" + CyTranslator().getText("TXT_KEY_REVOLUTION_TOTAL", ()) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_NEG_CHAR)) + "</font>", iWidth)
		screen.setTableColumnHeader( "RevolutionTable", 14, "<font=2>" + CyTranslator().getText("TXT_KEY_REVOLUTION_TOTAL", ()) + "</font>", iWidth)
		screen.enableSort( "RevolutionTable" )
		screen.setStyle("RevolutionTable", "Table_StandardCiv_Style")

		iPlayer = CyGame().getActivePlayer()
		pPlayer = gc.getPlayer(iPlayer)
		iCivilization = pPlayer.getCivilizationType()
		iHandicap = pPlayer.getHandicapType()
		iModifier = 100 - gc.getHandicapInfo(iHandicap).getAIBarbarianCombatModifier() + gc.getHandicapInfo(iHandicap).getBarbarianCombatModifier()
		iGlobalModifer = pPlayer.getRevModifier()
		(pCity, iter) = pPlayer.firstCity(False)
		while(pCity):
			iRow = screen.appendTableRow("RevolutionTable")
			self.iTotal = 0
			screen.setTableText("RevolutionTable", 0, iRow, pCity.getName(), gc.getCivilizationInfo(iCivilization).getButton(), WidgetTypes.WIDGET_ZOOM_CITY, pCity.getOwner(), pCity.getID(), CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevHappy(pCity))
			screen.setTableInt("RevolutionTable", 1, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevHealth(pCity))
			screen.setTableInt("RevolutionTable", 2, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevReligion(pCity, iPlayer))
			screen.setTableInt("RevolutionTable", 3, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(int(self.getRevNationality(pCity, iPlayer)))
			screen.setTableInt("RevolutionTable", 4, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevOccupation(pCity))
			screen.setTableInt("RevolutionTable", 5, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevDefenders(pCity, iPlayer))
			screen.setTableInt("RevolutionTable", 6, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(int(self.getRevPopulation(pCity)))
			screen.setTableInt("RevolutionTable", 7, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevEspionage(pCity))
			screen.setTableInt("RevolutionTable", 8, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevCivics(pCity, iPlayer))
			screen.setTableInt("RevolutionTable", 9, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevBuildingsPositive(pCity))
			screen.setTableInt("RevolutionTable", 10, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevBuildingsNegative(pCity))
			screen.setTableInt("RevolutionTable", 11, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevPositives(pCity, iPlayer))
			screen.setTableInt("RevolutionTable", 12, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sText = self.addTotal(self.getRevNegatives(pCity, iPlayer, iGlobalModifer))
			screen.setTableInt("RevolutionTable", 13, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			sColor = CyTranslator().getText("[COLOR_YELLOW]", ())
			if self.iTotal < self.iSafeZone:
				sColor = CyTranslator().getText("[COLOR_POSITIVE_TEXT]", ())
			elif self.iTotal >= self.iDangerZone:
				sColor = CyTranslator().getText("[COLOR_NEGATIVE_TEXT]", ())
			sText = "<font=3>" + sColor + str(self.countRevolution(pCity, iPlayer, iGlobalModifer)) + "</color></font>"
			screen.setTableInt("RevolutionTable", 14, iRow, sText, "", WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
			(pCity, iter) = pPlayer.nextCity(iter, False)
		
		screen.addPanel( "GlobalModifiers", u"", u"", True, False, 20, self.nTableHeight + 60 - self.modHeight, (self.nTableWidth/2) - (self.nMargin*2), self.modHeight, PanelStyles.PANEL_STYLE_MAIN )
		if iGlobalModifer < 0:
			sText1 = u"<font=3>" + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL_NEG", (iGlobalModifer,)) + "</font>"
		else:	
			sText1 = u"<font=3>" + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL", (iGlobalModifer,)) + "</font>"
		if pPlayer.getRevModifierScore() != 0:
			sText1 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL_DOMINATION", (pPlayer.getRevModifierScore(),)) + "</font>"
		if pPlayer.getRevModifierPower() != 0:
			sText1 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL_MILITARISM", (pPlayer.getRevModifierPower(),)) + "</font>"
		if pPlayer.getRevModifierWarExhaustion() != 0:
			sText1 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL_WE", (pPlayer.getRevModifierWarExhaustion(),)) + "</font>"
		if pPlayer.getRevModifierEndOfHistory() != 0:
			if pPlayer.getRevModifierScore() != 0:
				sText1 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL_EOH", (pPlayer.getRevModifierEndOfHistory(),)) + "</font>"
			else:
				sText1 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + CyTranslator().getText("TXT_KEY_SEPARATISM_GLOBAL_EOH_OTHER", (pPlayer.getRevModifierEndOfHistory(),)) + "</font>"
				
		screen.addMultilineText( "GlobalModifiersTitle", sText1, 20 + self.textMargin, self.nTableHeight + 60 - self.modHeight + self.textMargin, (self.nTableWidth/2) - (self.nMargin*2), self.modHeight, WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)

		screen.addPanel( "EraModifiers", u"", u"", True, False, 20 + (self.nTableWidth/2) + (self.nMargin*2), self.nTableHeight + 60 - self.modHeight, (self.nTableWidth/2) - (self.nMargin*2), self.modHeight, PanelStyles.PANEL_STYLE_MAIN )
		sText2 = str()
		iLeaderEra = gc.getPlayer(CyGame().getRankPlayer(0)).getCurrentEra()
		if CyGame().getCurrentEra() == 0 and iLeaderEra < 2:
			sText2 = u"<font=3>" + "Sovereignity definition: tribal kinship" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from culture" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit*2) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() == 1:
			sText2 = u"<font=3>" + "Sovereignity definition: client state system" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit*2) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() == 0 and iLeaderEra == 2:
			sText2 = u"<font=3>" + "Sovereignity definition: client state system" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit*2) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() == 2:
			sText2 = u"<font=3>" + "Sovereignity definition: feudal contract" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit*2) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() < 2 and iLeaderEra == 3:
			sText2 = u"<font=3>" + "Sovereignity definition: feudal contract" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit*2) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() == 3:
			sText2 = u"<font=3>" + "Sovereignity definition: Westphalian sovereignty" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() < 3 and iLeaderEra == 4:
			sText2 = u"<font=3>" + "Sovereignity definition: Westphalian sovereignty" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() == 4:
			sText2 = u"<font=3>" + "Sovereignity definition: national self-determination" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "+50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from culture" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
		elif CyGame().getCurrentEra() < 4 and iLeaderEra == 5:
			sText2 = u"<font=3>" + "Sovereignity definition: national self-determination" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "+50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from culture" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"	
		elif CyGame().getCurrentEra() == 5:
			sText2 = u"<font=3>" + "Sovereignity definition: international recognition" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
		elif CyGame().getCurrentEra() < 5 and iLeaderEra == 6:
			sText2 = u"<font=3>" + "Sovereignity definition: international recognition" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
		else:
			sText2 = u"<font=3>" + "Sovereignity definition: supranational authorities" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from culture" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-50%" + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from religion" + "</font>"
			sText2 += u"<font=2>" + "\n" + CyTranslator().getText("[ICON_BULLET]", ()) + "-" + str(self.iUnit) + u" %c" %(CyGame().getSymbolID(FontSymbols.SEPARATISM_CHAR)) + " from each military unit" + "</font>"
			
		screen.addMultilineText( "EraModifiersTitle", sText2, 20 + (self.nTableWidth/2) + (self.nMargin*2) + self.textMargin, self.nTableHeight + 60 - self.modHeight + self.textMargin, (self.nTableWidth/2) - (self.nMargin*2), self.modHeight, WidgetTypes.WIDGET_GENERAL, -1, -1, CvUtil.FONT_LEFT_JUSTIFY)
	
	def addTotal(self, iCount):
		self.iTotal += iCount
		sColor = ""
		if iCount < 0:
			sColor = CyTranslator().getText("[COLOR_POSITIVE_TEXT]", ())
		elif iCount > 0:
			sColor = CyTranslator().getText("[COLOR_NEGATIVE_TEXT]", ())
		return "<font=3>" + sColor + str(iCount) + "</color></font>"
		
	def handleInput (self, inputClass):
		if ( inputClass.getNotifyCode() == NotifyCode.NOTIFY_LISTBOX_ITEM_SELECTED ):
			if (inputClass.getMouseX() == 0):
				screen = CyGInterfaceScreen("RevolutionTracker", CvScreenEnums.REVOLUTION_SCREEN)
				screen.hideScreen()				
				CyInterface().selectCity(gc.getPlayer(inputClass.getData1()).getCity(inputClass.getData2()), true);
				popupInfo = CyPopupInfo()
				popupInfo.setButtonPopupType(ButtonPopupTypes.BUTTONPOPUP_PYTHON_SCREEN)
				popupInfo.setText(u"showRevolutionTracker")
				popupInfo.addPopup(inputClass.getData1())
		return 0

	def update(self, fDelta):
		return 1
		
	def getNewID(self):
		for iPlayerX in xrange(gc.getMAX_CIV_PLAYERS()):
			pPlayerX = gc.getPlayer(iPlayerX)
			if pPlayerX.isAlive(): continue
			if pPlayerX.isEverAlive(): continue
			else:
				return iPlayerX
		return -1